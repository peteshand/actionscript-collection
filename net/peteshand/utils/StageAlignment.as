package net.peteshand.utils{	import flash.display.LoaderInfo;	import flash.events.Event;	/**	 * Video Dimension Calculator.	 * This class is used to calculate the aspect ratio to use to best fit the Video Display based on the original FLV aspect ratio.	 */	public class StageAlignment	{		private var ref:Object;		private var stage:Object;				private var ssWidth:int = 0;		private var ssHeight:int = 0;		private var mnX:Number = 0;		private var mxX:Number = 0;		private var mnY:Number = 0;		private var mxY:Number = 0;				public function StageAlignment(_ref:Object):void 		{			ref = _ref			stage = ref.stage;		}		private function calculate():void		{			trace("stage.loaderInfo.width = " + ref.loaderInfo.width);			trace("stage.loaderInfo.height = " + ref.loaderInfo.height);						ssWidth = ref.loaderInfo.width;			ssHeight = ref.loaderInfo.height;		}		private function Check():void		{			if (ssWidth == 0){				calculate();			}		}		public function get minX():Number		{			Check();			if (stage.align == "")			mnX = 0 - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "TL")	mnX = 0;			else if (stage.align == "TR")	mnX = ssWidth - stage.stageWidth;			else if (stage.align == "T")	mnX = 0 - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "BL")	mnX = 0;			else if (stage.align == "BR")	mnX = ssWidth - stage.stageWidth;			else if (stage.align == "B")	mnX = 0 - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "L")	mnX = 0;			else if (stage.align == "R")	mnX = ssWidth - stage.stageWidth;			return mnX;		}		public function get maxX():Number		{			Check();			if (stage.align == "")			mxX = stage.stageWidth - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "TL")	mxX = stage.stageWidth;			else if (stage.align == "TR")	mxX = ssWidth			else if (stage.align == "T")	mxX = stage.stageWidth - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "BL")	mxX = stage.stageWidth;			else if (stage.align == "BR")	mxX = ssWidth			else if (stage.align == "B")	mxX = stage.stageWidth - ((stage.stageWidth - ssWidth) / 2);			else if (stage.align == "L")	mxX = stage.stageWidth;			else if (stage.align == "R")	mxX = ssWidth			return mxX;		}		public function get minY():Number		{			Check();			if (stage.align == "")			mnY = 0 - ((stage.stageHeight - ssHeight) / 2);			else if (stage.align == "TL")	mnY = 0;			else if (stage.align == "TR")	mnY = 0;			else if (stage.align == "T")	mnY = 0;			else if (stage.align == "BL")	mnY = ssHeight - stage.stageHeight;			else if (stage.align == "BR")	mnY = ssHeight - stage.stageHeight;			else if (stage.align == "B")	mnY = ssHeight - stage.stageHeight;			else if (stage.align == "L")	mnY = 0 - ((stage.stageHeight - ssHeight) / 2);			else if (stage.align == "R")	mnY = 0 - ((stage.stageHeight - ssHeight) / 2);			return mnY;		}		public function get maxY():Number		{			Check();			if (stage.align == "")			mxY = stage.stageHeight - ((stage.stageHeight - ssHeight) / 2);			else if (stage.align == "TL")	mxY = stage.stageHeight;			else if (stage.align == "TR")	mxY = stage.stageHeight;			else if (stage.align == "T")	mxY = stage.stageHeight;			else if (stage.align == "BL")	mxY = ssHeight;			else if (stage.align == "BR")	mxY = ssHeight;			else if (stage.align == "B")	mxY = ssHeight;			else if (stage.align == "L")	mxY = stage.stageHeight - ((stage.stageHeight - ssHeight) / 2);			else if (stage.align == "R")	mxY = stage.stageHeight - ((stage.stageHeight - ssHeight) / 2);			return mxY;		}		public function get midX():Number		{			return (maxX+minX)/2;		}		public function get midY():Number		{			return (maxY+minY)/2;		}	}}