package net.peteshand.utils{	/**	 * Video Dimension Calculator.	 * This class is used to calculate the aspect ratio to use to best fit the Video Display based on the original FLV aspect ratio.	 */	public class Dimensions	{		/**		 * Holds the width, height, X position, and Y position to use for an FLV.		 */		protected var newDimensions:Array = new Array();		/**		 * The aspect ratio to best fit our Video Display.		 */		protected var displayRatio:Number;		/**		 * The original aspect ratio of the FLV.		 */		protected var videoRatio:Number;				/**		 * Calculate the dimensions and aspect ratio to use to fit the Video Display.		 * 		 * @param	_displayType This defines which display type to use. It is defined within Settings.xml. Possibilities include Normal, Zoom, Original, or Stretch.		 * @param	displayWidth The width of the video display		 * @param	displayHeight The height of the video display		 * @param	videoWidth The width of the FLV.		 * @param	videoHeight The height of the FLV.		 * @return  newDimensions An array containing the width, height, X position, and Y position to use to best fit the video display. 		 */		public function Calculator(_displayType:String, displayWidth:Number, displayHeight:Number, videoWidth:Number, videoHeight:Number):Array 		{			var displayType:String = _displayType						displayRatio = displayWidth/displayHeight;			videoRatio = videoWidth/videoHeight;						/////////////////////////////////////////////////////////////**////////////////////////////////////////////////////////////			if (displayType.toUpperCase() == "NORMAL")					/**/			{															/**/				if (videoRatio < displayRatio)							/**/				{														/**/					newDimensions[0] = displayHeight * videoRatio;		/**/	newDimensions[2] = (displayWidth - newDimensions[0]) / 2;					newDimensions[1] = displayHeight;					/**/	newDimensions[3] = 0;				}														/**/				else 													/**/				{														/**/					newDimensions[0] = displayWidth;					/**/	newDimensions[2] = 0;					newDimensions[1] = displayWidth / videoRatio;		/**/	newDimensions[3] = (displayHeight - newDimensions[1]) / 2;				}														/**/			}															/**/			else if (displayType.toUpperCase() == "ZOOM")				/**/			{															/**/				if (videoRatio < displayRatio)							/**/				{														/**/					newDimensions[0] = displayWidth;					/**/	newDimensions[2] = 0;					newDimensions[1] = displayWidth / videoRatio;		/**/	newDimensions[3] = (displayHeight - newDimensions[1]) / 2;				}														/**/				else 													/**/				{														/**/					newDimensions[0] = displayHeight * videoRatio;		/**/	newDimensions[2] = (displayWidth - newDimensions[0]) / 2;					newDimensions[1] = displayHeight;					/**/	newDimensions[3] = 0;				}														/**/			}															/**/			else if (displayType.toUpperCase() == "ORIGINAL")			/**/			{															/**/				newDimensions[0] = videoWidth;							/**/	newDimensions[2] = (displayWidth - newDimensions[0]) / 2;				newDimensions[1] = videoHeight;							/**/	newDimensions[3] = (displayHeight - newDimensions[1]) / 2;			}															/**/			else if (displayType.toUpperCase() == "STRETCH")			/**/			{															/**/				newDimensions[0] = displayWidth;						/**/	newDimensions[2] = (displayWidth - newDimensions[0]) / 2;				newDimensions[1] = displayHeight;						/**/	newDimensions[3] = (displayHeight - newDimensions[1]) / 2;			}															/**/			/////////////////////////////////////////////////////////////**////////////////////////////////////////////////////////////						//trace("newDimensions[0] = " + newDimensions[0]);			//trace("newDimensions[1] = " + newDimensions[1]);			//trace("newDimensions[2] = " + newDimensions[2]);			//trace("newDimensions[3] = " + newDimensions[3]);						return newDimensions;		}		public function get width():Number		{			return newDimensions[0];		}		public function get height():Number		{			return newDimensions[1];		}		public function get x():Number		{			return newDimensions[2];		}		public function get y():Number		{			return newDimensions[3];		}	}}