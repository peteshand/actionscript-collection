package net.peteshand.components{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		import flash.text.TextField;	import flash.text.TextFieldType;    import flash.text.TextFormat;    import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;	import flash.net.SharedObject;		public class InputBox extends MovieClip	{		public var validateEmail:Boolean = false;		private var sharedObject:SharedObject = SharedObject.getLocal("userData");		private var sharedObjectName:String = "";		private var DisplayName:Boolean = false;				// display		private var input:TextField;		private var tfName:TextField;		private var textBox:Sprite;		private var textBoxError:Sprite;				private var ThisFocus:Object;				private var inputFormat:TextFormat;		private var updateDelayCount:int;				private var bg:Array = new Array(0x000000, 0, 0x000000, 0);		private var error:Array = new Array(0x000000, 0, 0x000000, 0);		private var textColour:uint = 0xDBD7BB;		private var textErrorColour:uint = 0xFF0000;				public function InputBox(_sharedObjectName:String="", Width:int=100, Height:int=24, _bg:Array=null, _error:Array=null, _textColour:Array=null):void		{			if (_bg != null) bg = _bg;			if (_error != null) error = _error;			if (_textColour != null) {				textColour = _textColour[0];				textErrorColour = _textColour[1];			}						textBox = new Sprite();			textBox.graphics.lineStyle(1,bg[2],bg[3]);			textBox.graphics.beginFill(bg[0],bg[1]);			textBox.graphics.drawRect(0.5,0.5,Width-1,Height-1);			textBox.graphics.endFill();			addChild(textBox);						textBoxError = new Sprite();			textBoxError.graphics.lineStyle(1,error[2],error[3]);			textBoxError.graphics.beginFill(error[0],error[1]);			textBoxError.graphics.drawRect(0.5,0.5,Width-1,Height-1);			textBoxError.graphics.endFill();			addChild(textBoxError);						tfName = new TextField();			tfName.multiline = false;			tfName.y = 3;			tfName.height = Height;			tfName.type = TextFieldType.DYNAMIC;			addChild(tfName);						input = new TextField();			input.multiline = false;			input.y = 3;			input.height = Height;			input.type = TextFieldType.INPUT;			addChild(input);						width = Width-1;						Clear();						sharedObjectName = _sharedObjectName;			if (sharedObjectName != ""){				var sov:String = String(sharedObject.data[sharedObjectName]);				if (sov != "undefined" && sov != "") 				{					trace("sov = " + sov);					input.text = sov;				}			}			setFormat(textColour);						input.addEventListener(Event.CHANGE, OnTextChange);			textBoxError.visible = false;						addEventListener(Event.ENTER_FRAME, focusListener);		}		public function Clear():void		{			input.text = "";			setFormat(textColour);		}		private function OnTextChange(event:Event):void		{			if (textBoxError.visible){				if (v) textBoxError.visible = false;			}						if (input.text == "" && displayName) {				//tfName.text = sharedObjectName;				//setFormat(textColour);			}			else tfName.text = "";						setFormat(textColour);			UpdateSharedObject();		}		public function get valid():Boolean		{			var returnVal:Boolean = v;			if (returnVal) {				textBoxError.visible = false;			}			else if (!returnVal) {				textBoxError.visible = true;				input.stage.focus = input;				input.setSelection(0, input.text.length);				setFormat(textErrorColour);			}			return returnVal;		}		private function get v():Boolean		{			if (input.text == ""){				input.stage.focus = input;				return false;			}			else {				if (validateEmail){					if (isValidEmail(input.text)) return true;					else {						input.stage.focus = input;						return false;					}				}				else return true;			}		}		private function isValidEmail(email:String):Boolean {			var emailExpression:RegExp = /([a-z0-9._-]+?)@([a-z0-9.-]+)\.([a-z]{2,4})/;			return emailExpression.test(email);		}				override public function set width(value:Number):void		{			textBox.width = value-1;			textBoxError.width = value-1;			input.width = value - 3;		}		override public function get width():Number		{			return textBox.width;		}				public function UpdateSharedObject():void		{			updateDelayCount = 0;			addEventListener(Event.ENTER_FRAME, updateDelay);		}		private function updateDelay(event:Event):void		{			if (updateDelayCount < 10){				updateDelayCount++;			}			else {				removeEventListener(Event.ENTER_FRAME, updateDelay);				sharedObject.data[sharedObjectName] = input.text;				sharedObject.flush(); // writes changes to disk			}		}				public function setFormat(tc:uint):void		{			inputFormat = new TextFormat();			inputFormat.align = "left";			inputFormat.blockIndent = 0;			inputFormat.bold = false;			inputFormat.bullet = false;			inputFormat.color = tc;			inputFormat.font = "Lucida Grande";			inputFormat.indent = 0;			inputFormat.italic = false;			inputFormat.kerning = false;			inputFormat.leading = 0;			inputFormat.leftMargin = 3;			inputFormat.letterSpacing = 0;			inputFormat.rightMargin = 3;						input.setTextFormat(inputFormat);			input.embedFonts;						tfName.setTextFormat(inputFormat);			tfName.embedFonts;		}		public function set value(v:String):void		{			input.text = v;		}		public function get value():String		{			return input.text;		}		public function set tab(v:int):void		{			input.tabIndex = v;		}		public function get tab():int		{			return input.tabIndex;		}		public function set displayName(v:Boolean):void		{			DisplayName = v;			if (DisplayName && input.text == ""){				tfName.text = sharedObjectName;				setFormat(textColour);			}		}		public function get displayName():Boolean		{			return DisplayName;		}		private function focusListener(event:Event):void		{			setFormat(textColour);						if (ThisFocus != stage.focus){								trace(stage.focus);								if (stage.focus == input){					trace("DFBFGHDFGH");															if (input.text == ""){						input.text = "A";						setFormat(textColour);						stage.focus = this;						input.text = "";						stage.focus = input					}															tfName.text = "";					setFormat(textColour);				}				else {					if (displayName && input.text == ""){						tfName.text = sharedObjectName;						setFormat(textColour);					}				}			}			ThisFocus = stage.focus;		}	}}