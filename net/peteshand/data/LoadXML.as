package circul8.data{	import flash.display.MovieClip;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.Event;		public class LoadXML extends MovieClip	{		private var xmlData:XML;				public function LoadXML():void {}				protected function loadComplete():void 		{			dispatchEvent(new Event(Event.COMPLETE));		}				public function load(Location:String):void		{			var xmlLoader:URLLoader = new URLLoader();			xmlData = new XML();			xmlLoader.addEventListener(Event.COMPLETE, loadedDisplayXML);			xmlLoader.load(new URLRequest(Location));						function loadedDisplayXML(e:Event):void			{				xmlData = new XML(e.target.data);				if (xmlData == "") {					xmlData = <XMLData>No Data</XMLData>;				}				loadComplete();			}		}		public function get xml():XML		{			return xmlData;		}		public function getNode(Node:String, onlyFirst:Boolean = false):Array		{			var returnArray:Array = new Array();			ParseData(xmlData, 0);						//trace("Node = " + Node);						function ParseData(xmlData, count:int, First:int = 0):void			{								for (var i:int = 0; i < xmlData.length(); i++){										var Children:XMLList = xmlData[i].children();					for each (var Info:XML in Children) {												if (Info.name() == Node){							if (First == 0){								returnArray.push(Info.children());								if (onlyFirst == true){ First++; }							}						}					}					if (Children.length() > 0){						ParseData(xmlData[i].children(), count+1, 0);					}				}			}						return returnArray;		}		public function getAttribute(Attribute:String):Array		{			var returnArray:Array = new Array();			ParseData(xmlData, 0);						trace(xmlData.length());						function ParseData(xmlData, count:int):void			{				var Attributes:XMLList = xmlData.attributes();								if ((String(Attributes) == "") && (count < 5)){					ParseData(xmlData.children(), count+1)				}				for each (var Info:XML in Attributes) {					if (Info.name() == Attribute){						returnArray.push(Info);					}				}							}						return returnArray;		}				public function ParseDataNode(XmlData:XML, Node:String, onlyFirst:Boolean = false):Array		{			var returnArray:Array = new Array();			ParseData(XmlData, 0);						//trace("Node = " + Node);						function ParseData(xmlData, count:int, First:int = 0):void			{								for (var i:int = 0; i < xmlData.length(); i++){					var Children:XMLList = xmlData[i].children();					for each (var Info:XML in Children) {						if (Info.name() == Node){							if (First == 0){								returnArray.push(Info);								if (onlyFirst == true){ First++; }							}						}					}					if (Children.length() > 0){						ParseData(xmlData[i].children(), count+1, 0);					}				}			}						return returnArray;		}		public function ParseDataAttribute(XmlData:XML, Attribute:String):Array		{			var returnArray:Array = new Array();			ParseData(XmlData, 0);			function ParseData(xmlData, count:int, First:int = 0):void			{				for (var i:int = 0; i < xmlData.length(); i++){										var Push:Boolean = false;										var Attributes:XMLList = xmlData[i].attributes();					if ((String(Attributes) == "") && (count < 5)){						ParseData(xmlData.children(), count+1);					}										for each (var Info:XML in Attributes) {											if (Info.name() == Attribute){							returnArray.push(Info);														Push = true;						}					}					if (Push == false && count < 5){						ParseData(xmlData[i].children(), count+1);					}				}			}			return returnArray;		}				public function ParseDataAttributeCom(XmlData:XML, Attribute:String, AttributeVal:String, comAttribute:String):Array		{			var lastAttributeType:String = "";						var returnArray:Array = new Array();			ParseData(XmlData, 0);			function ParseData(xmlData, count:int, First:int = 0):void			{				for (var i:int = 0; i < xmlData.length(); i++){										var Push:Boolean = false;					var Attributes:XMLList = xmlData[i].attributes();					if ((String(Attributes) == "") && (count < 5)){						ParseData(xmlData.children(), count+1);					}										for each (var Info:XML in Attributes) {						if (Info.name() == comAttribute){							if (lastAttributeType ==  AttributeVal){								trace(Info);								returnArray.push(Info);								Push = true;							}						}						lastAttributeType = Info;																	}					if (Push == false && count < 5){						ParseData(xmlData[i].children(), count+1);					}				}			}			return returnArray;		}	}}